;/*******************************************************
;This program was created by the
;CodeWizardAVR V3.12 Advanced
;Automatic Program Generator
;© Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 7/4/2018
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 8.000000 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*******************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;// Alphanumeric LCD functions
;#include <alcd.h>
;#include <pgmspace.h>
;#include <interrupt.h>
;	flags -> R17

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
	cli
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;#include <io.h>
;
;
;// Declare your global variables here
;
;void delay();
;void DisplayChar(char f);
;void Scanner();
;void SIGNAL();
;void DelayLong();
;char Vline[30];
;char cc,y,U,P;
; int k;
; char String[] = "Manoj R. Thakur  ";

	.DSEG
;
; int i,vl;
; char S,Z,g,K,w;
; char M;
;/*--------------------------------------------------------------------------------------------------
;                                     Character generator
;
;             This table defines the standard ASCII characters in a 3x5 dot format.
;--------------------------------------------------------------------------------------------------*/
;const char whichBlock [8] =
;    { 0x80, 0x40, 0x20, 0x10, 0x08, 0x04, 0x02, 0x01} ;
;const char FontLookup [][6] =
;{
;    { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },  // sp
;
;    { 0x03, 0x03, 0xff, 0xff, 0x03, 0x03 },   // T
;    { 0xf8, 0xfc, 0x07, 0x07, 0xfc, 0xf8 },   // A
;    { 0x00, 0x38, 0x44, 0x82, 0x01, 0x8c },   // (
;    { 0x9e, 0x92, 0x92, 0xf2, 0x60, 0x00 },   // S
;    { 0xfe, 0xfe, 0x08, 0x1c, 0x36, 0x62 },   // K
;    { 0x82, 0xc6, 0x6c, 0x38, 0x1c, 0x0e },   // Y
;    { 0x06, 0x00, 0x08, 0x08, 0x08, 0x00 },   // Y
;
;    { 0xFF, 0xFF, 0x00, 0xf8, 0x24, 0x22 },   // A
;    { 0x24, 0xf8, 0x00, 0xfa, 0x00, 0xfc },   // i
;    { 0x08, 0x06, 0x00, 0xfb, 0x01, 0xfb },   // r
;    { 0x87, 0x6b, 0x6b, 0xa7, 0xff, 0x01 },   // T
;    { 0xff, 0xff, 0x00, 0x08, 0x08, 0x00 },   // e
;
;    { 0xff, 0x81, 0xad, 0xad, 0xd3, 0xff },   // B
;    { 0x81, 0xff, 0xc3, 0xbd, 0xad, 0xcb },   // I
;    { 0xff, 0x00, 0x02, 0x02, 0x7e, 0x02 },   // G
;    { 0x02, 0x00, 0x1e, 0x20, 0x40, 0x20 },   // T
;    { 0x1e, 0x00, 0x08, 0x08, 0x08, 0x00 },   // V
;
;    { 0xf8, 0xfc, 0x07, 0x07, 0xfc, 0xf8 },   // 2
;    { 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00 },   // 3
;    { 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00 },   // 4
;    { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00 },   // 5
;    { 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00 },   // 6
;    { 0x01, 0x71, 0x09, 0x05, 0x03, 0x00 },   // 7
;    { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00 },   // 8
;    { 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00 },   // 9
;    { 0x00, 0x36, 0x36, 0x00, 0x00, 0x00 },   // :
;    { 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 },   // ;
;    { 0x08, 0x14, 0x22, 0x41, 0x00, 0x00 },   // <
;    { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 },   // =
;    { 0x00, 0x41, 0x22, 0x14, 0x08, 0x00 },   // >
;    { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00 },   // ?
;    { 0x32, 0x49, 0x59, 0x51, 0x3E, 0x00 },   // @
;    { 0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00 },   // A
;    { 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 },   // B
;    { 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 },   // C
;    { 0x7F, 0x41, 0x41, 0x22, 0x1C, 0x00 },   // D
;    { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 },   // E
;    { 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00 },   // F
;    { 0x3E, 0x41, 0x49, 0x49, 0x7A, 0x00 },   // G
;    { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 },   // H
;    { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 },   // I
;    { 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00 },   // J
;    { 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00 },   // K
;    { 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 },   // L
;    { 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00 },   // M
;    { 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00 },   // N
;    { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 },   // O
;    { 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00 },   // P
;    { 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00 },   // Q
;    { 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00 },   // R
;    { 0x46, 0x49, 0x49, 0x49, 0x31, 0x00 },   // S
;    { 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00 },   // T
;    { 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00 },   // U
;    { 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00 },   // V
;    { 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00 },   // W
;    { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 },   // X
;    { 0x07, 0x08, 0x70, 0x08, 0x07, 0x00 },   // Y
;    { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00 },   // Z
;    { 0x00, 0x7F, 0x41, 0x41, 0x00, 0x00 },   // [
;    { 0x55, 0x2A, 0x55, 0x2A, 0x55, 0x00 },   // 55
;    { 0x00, 0x41, 0x41, 0x7F, 0x00, 0x00 },   // ]
;    { 0x7F, 0x7F, 0x49, 0x49, 0x41, 0x00 },   // E//{ 0x04, 0x02, 0x01, 0x02, 0x04, 0x00 },   // ^
;    { 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 },   // _
;    { 0x00, 0x01, 0x02, 0x04, 0x00, 0x00 },    // '
; { 0x20, 0x54, 0x54, 0x54, 0x78, 0x00 },   // a
;    { 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00 },   // b
;    { 0x38, 0x44, 0x44, 0x44, 0x20, 0x00 },   // c
;    { 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00 },   // d
;    { 0x38, 0x54, 0x54, 0x54, 0x18, 0x00 },   // e
;    { 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00 },   // f
;    { 0x0C, 0x52, 0x52, 0x52, 0x3E, 0x00 },   // g
;    { 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00 },   // h
;    { 0x00, 0x44, 0x7D, 0x40, 0x00, 0x00 },   // i
;    { 0x20, 0x40, 0x44, 0x3D, 0x00, 0x00 },   // j
;    { 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00 },   // k
;    { 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00 },   // l
;    { 0x7C, 0x04, 0x18, 0x04, 0x78, 0x00 },   // m
;    { 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00 },   // n
;    { 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 },   // o
;    { 0x7C, 0x14, 0x14, 0x14, 0x08, 0x00 },   // p
;    { 0x08, 0x14, 0x14, 0x18, 0x7C, 0x00 },   // q
;    { 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00 },   // r
;    { 0x48, 0x54, 0x54, 0x54, 0x20, 0x00 },   // s
;    { 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00 }   // t
;/*
;    { 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00 },   // u
;    { 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00 },   // v
;    { 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00 },   // w
;    { 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 },   // x
;    { 0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00 },   // y
;    { 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 }    // z
; */
;};
;
;void main()
; 0000 009D {

	.CSEG
;PCODE: $00000017 VOL: 0
; 0000 009E  cc=0;
;PCODE: $00000018 VOL: 0
; 0000 009F  y=0;
;PCODE: $00000019 VOL: 0
; 0000 00A0  DDRD=0xFF;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 00A1  DDRB=0xFF;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 00A2 
; 0000 00A3  //Initialize scanner
; 0000 00A4  TCNT0=0xF1;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 00A5  TCCR0=0x05;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 00A6  TIMSK=0x01;
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 00A7  SREG=0x80;
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 00A8 
; 0000 00A9  PORTB=0x00;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 00AA  PORTD=0xff;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 00AB 
; 0000 00AC  while(1){
;PCODE: $0000002A VOL: 0
; 0000 00AD    /* int i = 0;
; 0000 00AE     for( i =0; i<6; i++){
; 0000 00AF 
; 0000 00B0         PORTB = ~FontLookup[5][i];
; 0000 00B1         delay();
; 0000 00B2     }
; 0000 00B3  }
; 0000 00B4  */ int i,j ;
; 0000 00B5  int x = 0 ;
; 0000 00B6 for( j = 0 ; j < 8 ; j++){
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;	i -> Y+4
;	j -> Y+2
;	x -> Y+0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 00B7     x= 0 ;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 00B8    for(i = j ; i<5+j ; i++){
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 00B9 
; 0000 00BA     PORTB=whichBlock[i%8];
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 00BB     PORTD=~FontLookup[5][x];
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 00BC     delay();
;PCODE: $00000055 VOL: 0
; 0000 00BD     x++;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 00BE     }
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 00BF     DelayLong();
;PCODE: $0000005F VOL: 0
; 0000 00C0    }
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 00C1 }
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00C2 
; 0000 00C3  }
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;
;void DelayLong()
; 0000 00C6 {
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00C7  int t;
; 0000 00C8   for(t=0;t<10000;t++){}
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;	t -> R16,R17
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C9 }
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;void delay()
; 0000 00CB {
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00CC  int k;
; 0000 00CD  for(k=1;k<160;k++)
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;	k -> R16,R17
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00CE  {
; 0000 00CF  }
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00D0 }
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;
;void SIGNAL()
; 0000 00D3 {
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00D4  cc=cc++;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00D5  Scanner();
;PCODE: $0000009B VOL: 0
; 0000 00D6  TCNT0=0xFE;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00D7 }
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;
;void Scanner()
; 0000 00DA {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00DB switch(cc)
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00DC {
; 0000 00DD case 1:
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00DE   PORTD=0xFF;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00DF   PORTB=0x80;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00E0   PORTD=~Vline[0];
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E1   break;
;PCODE: $000000AD VOL: 0
; 0000 00E2 case 2:
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00E3   PORTD=0xFF;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00E4   PORTB=0x40;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00E5   PORTD=~Vline[1];
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00E6   break;
;PCODE: $000000B9 VOL: 0
; 0000 00E7 case 3:
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00E8   PORTD=0xFF;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00E9   PORTB=0x20;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00EA   PORTD=~Vline[2];
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 00EB   break;
;PCODE: $000000C5 VOL: 0
; 0000 00EC case 4:
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00ED   PORTD=0xFF;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00EE   PORTB=0x10;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 00EF   PORTD=~Vline[3];
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00F0   break;
;PCODE: $000000D1 VOL: 0
; 0000 00F1 case 5:
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00F2   PORTD=0xFF;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 00F3   PORTB=0x08;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00F4   PORTD=~Vline[4];
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 00F5   break;
;PCODE: $000000DD VOL: 0
; 0000 00F6 case 6:
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00F7   PORTD=0xFF;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00F8   PORTB=0x04;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00F9   PORTD=~Vline[5];
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00FA   break;
;PCODE: $000000E9 VOL: 0
; 0000 00FB case 7:
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00FC   PORTD=0xFF;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00FD   PORTB=0x02;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 00FE   PORTD=~Vline[6];
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00FF   break;
;PCODE: $000000F5 VOL: 0
; 0000 0100 case 8:
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0101   PORTD=0xFF;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0102   PORTB=0x01;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0103   PORTD=~Vline[7];
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0104   cc=0;
;PCODE: $00000101 VOL: 0
; 0000 0105 }
;PCODE: $00000102 VOL: 0
; 0000 0106 }
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;
;/*********************************************************************************/
;/*         Display Char                           */
;/*********************************************************************************/
;void DisplayChar(char f)
; 0000 010C {
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 010D char g;
; 0000 010E f=f-0x20;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;	f -> Y+1
;	g -> R17
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 010F  for(g=4;g>=0;g--)
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0110  {
; 0000 0111   Vline[y]=pgm_read_byte(&FontLookup[f][g]);
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0112   y=y++;
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0113  }
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
; 0000 0114   Vline[y]=0x00;
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 0115   y=0;//y++;
;PCODE: $00000130 VOL: 0
; 0000 0116 }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
